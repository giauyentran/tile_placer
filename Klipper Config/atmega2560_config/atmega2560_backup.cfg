[mcu]
serial: /dev/ttyAMA0
restart_method: command #For com with RPI over UART

[virtual_sdcard]
path: ~/gcode_files

#enable display status for moonraker
[display_status]

# Enable Pause/Resume Functionality
[pause_resume]

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 3000
max_z_velocity: 200
max_z_accel: 100
square_corner_velocity: 8.0

#Gcode G2/G3 Arc Support
[gcode_arcs]
resolution: 0.1

[stepper_x]
step_pin: PF0
dir_pin: !PF1
enable_pin: !PD7
microsteps: 16
rotation_distance: 40
homing_speed: 100
# connected to virtual endstop
endstop_pin: PE5
position_min: 0
position_endstop: 0
position_max: 700

# TMC Stepper Configurations for All Motors
# [tmc2209 stepper_x]
# # connected to X Stepper on S6
# uart_pin: PG5
# interpolate: true
# run_current: 1.0 
# sense_resistor: 0.110
# stealthchop_threshold: 0
# # Place a jumper on the two pin header near the endstop for sensorless homing
# diag_pin: PJ1 #connected to X- Endstop (X Jumper Header)
# # You may need to tune this value.  See https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing
# driver_SGTHRS: 115

[stepper_y]
step_pin: PF6
dir_pin: !PF7
enable_pin: !PF2
microsteps: 16
rotation_distance: 40
endstop_pin: !PJ0
position_min: 0
position_endstop: 0
position_max: 500
homing_speed: 100

# [tmc2209 stepper_y]
# # connected to X Stepper on S6
# uart_pin: PE3
# interpolate: true
# run_current: 1.0 
# sense_resistor: 0.110
# stealthchop_threshold: 0
# # Place a jumper on the two pin header near the endstop for sensorless homing
# diag_pin: PJ0 #connected to X- Endstop (X Jumper Header)
# # You may need to tune this value.  See https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing
# driver_SGTHRS: 115

[stepper_y1]
step_pin: PL3
dir_pin: PL1
enable_pin: !PK0
microsteps: 16
rotation_distance: 40
endstop_pin: !PJ1

# [tmc2209 stepper_y1]
# # connected to X Stepper on S6
# uart_pin: PH3
# interpolate: true
# run_current: 1.0 
# sense_resistor: 0.110
# stealthchop_threshold: 0
# # Place a jumper on the two pin header near the endstop for sensorless homing
# diag_pin: PE5 #connected to X- Endstop (X Jumper Header)
# # You may need to tune this value.  See https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing
# driver_SGTHRS: 115

[stepper_z]
step_pin: PA4
dir_pin: !PA6
enable_pin: !PA2
microsteps: 16
rotation_distance: 40
endstop_pin: PD2
position_min: 0
position_endstop: 0
position_max: 180
homing_positive_dir: false

# [tmc2209 stepper_z]
# # connected to X Stepper on S6
# uart_pin: PB2
# interpolate: true
# run_current: 0.1 
# sense_resistor: 0.110
# stealthchop_threshold: 0

# [extruder]
# step_pin: PA53
# dir_pin: !PA38
# enable_pin: !PA23
# microsteps: 16
# rotation_distance: 33.333
# nozzle_diameter: 0.400
# filament_diameter: 1.750
# heater_pin: PB4
# sensor_type: EPCOS 100K B57560G104F
# sensor_pin: PK5
# control: pid
# pid_Kp: 25.349
# pid_Ki: 1.216
# pid_Kd: 132.130
# min_extrude_temp: 150
# min_temp: -273.15
# max_temp: 275

[heater_bed]
heater_pin: PH5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK6
control: pid
pid_kp: 73.517
pid_ki: 1.132
pid_kd: 1193.728
min_temp: -100
max_temp: 100

[fan]
pin: PH6
kick_start_time: 0.200

[fan_generic solenoid]
pin: PL4
off_below: 0.99

[fan_generic pump ]
pin: PB4

# [heater_fan extruder_cooler_fan]
# pin: PL5

# if you want to use your probe for DELTA_CALIBRATE you will need that
#[probe]
#pin: ^PD3
#z_offset: 15.9
#samples: 3

[idle_timeout]
timeout: 360

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}